# -*- encoding: utf-8 -*-
##############################################################################
#
#
##############################################################################


from openerp.osv import fields, osv
from openerp.tools.translate import _

import openerp.addons.decimal_precision as dp

class purchase_order_line(osv.Model):
    _name = "purchase.order.line"
    _inherit = "purchase.order.line"
    
    _columns = {
        'price_unit': fields.float('Real Unit Price', required=True,
                                   digits=(16, 2), help="""Price that will be
                                   used in the rest of
                                   accounting cycle"""),
        'price_base': fields.float('Base Unit Price', required=True,
                                   digits=(16, 2), help="""Price base taken to
                                   calc the discount,
                                   is an informative
                                   price to use it in
                                   the rest of the
                                   purchase cycle like
                                   reference for users"""),
    }
    def discount_change(self, cr, uid, ids, product, discount, price_unit,
                        product_qty, partner_id, price_base):
        res = super(purchase_order_line,self).discount_change(cr, uid, ids, 
                    product, discount, price_unit, product_qty, partner_id, price_base)
        return res

    def rpu_change(self, cr, uid, ids, rpu, discount):
        res = super(purchase_order_line,self).rpu_change(cr, uid, ids, rpu, discount)
        return res

    def product_id_change(self, cr, uid, ids, pricelist_id, product_id, qty, uom_id,
            partner_id, date_order=False, fiscal_position_id=False, date_planned=False,
            name=False, price_unit=False, context=None):
        
        if context is None:
            context = {}
        
        # fijamos como unidad base, la unidad de compra ya que para 
        # efectos del branch de herrera la unidad de compra del producto
        # no debe cambiarse al momento de realizar un pedido de compra.
        if product_id:
            prod = self.pool.get('product.product').browse(cr, uid, product_id)
            uom_id = prod.uom_po_id.id
        
        """ Using super to extract result from vauxoo/purchase_discount/purchase_discount.py at line 89"""
        res = super(purchase_order_line,self).product_id_change(cr, uid, 
                          ids, pricelist_id, product_id, qty, uom_id,
                          partner_id, date_order, fiscal_position_id,
                          date_planned, name, price_unit, False)
        
        result = res['value']
        lang = False
        if partner_id:
            lang = self.pool.get('res.partner').read(
                cr, uid, partner_id,['lang'])['lang']
        context['lang'] = lang
        context['partner_id'] = partner_id
        
        if product_id:
            if result.get('price_unit',False):
                price_unit = result['price_unit']
                price_base = price_unit
                discount = 0.0
            else:
                return res
                
            shop_obj = self.pool.get('sale.shop')
            pricelist_obj=self.pool.get('product.pricelist')
            product_obj = self.pool.get('product.product')
                
            # verificacion del IVA en las sucursales, para la autocarga de impuestos
            taxes = []
            product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)
            shop_id = shop_obj.search(cr,uid,[('warehouse_id','=',context['warehouse_id'])])
            shop_tax = shop_obj.browse(cr,uid,shop_id)[0].tax_iva
            if not shop_tax:
                for tax in product.supplier_taxes_id:
                    if 'IVA' not in tax.name.upper():
                        taxes.append(tax.id)
                result['taxes_id'] = [[6, False, taxes]]
            
            if pricelist_id:
                pricelists = pricelist_obj.read(cr,uid,[pricelist_id],['visible_discount'])
                factor_list_price = float(product.uom_id.factor)
                factor_stnd_price = float(product.uom_po_id.factor)
                proporcion = float(factor_stnd_price/factor_list_price)
                price_base = product.standard_price / proporcion
                if(len(pricelists)>0 and pricelists[0]['visible_discount'] and price_base != 0):
                    discount = (price_base - price_unit) / price_base * 100
                    result['discount'] = discount
                result['price_base'] = price_base
        return res
    
class purchase_order(osv.Model):
    _name = "purchase.order"
    _inherit = "purchase.order"
    
    def _amount_all(self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        cur_obj=self.pool.get('res.currency')
        for order in self.browse(cr, uid, ids, context=context):
            res[order.id] = {
                'amount_untaxed': 0.0,
                'amount_discount': 0.0,
                'amount_tax': 0.0,
                'amount_total': 0.0,
            }
            val = val1 = val2 = 0.0
            cur = order.pricelist_id.currency_id
            for line in order.order_line:
               val1 += line.price_subtotal
               for c in self.pool.get('account.tax').compute_all(cr, uid, line.taxes_id, line.price_unit * (1-(line.discount or 0.0)/100.0), line.product_qty, line.product_id, order.partner_id)['taxes']:
                    val += c.get('amount', 0.0)
            res[order.id]['amount_tax']=cur_obj.round(cr, uid, cur, val)
            res[order.id]['amount_untaxed']=cur_obj.round(cr, uid, cur, val1)
            val2 += res[order.id]['amount_untaxed'] * ((order.discount or 0.0)/100.0)
            res[order.id]['amount_discount']=cur_obj.round(cr, uid, cur, val2)
            res[order.id]['amount_total']=res[order.id]['amount_untaxed'] - res[order.id]['amount_discount'] + res[order.id]['amount_tax']
        return res
         
    def _get_order(self, cr, uid, ids, context=None):
        
        result = {}
        for line in self.pool.get('purchase.order.line').browse(cr, uid, ids, context=context):
            result[line.order_id.id] = True
        return result.keys()
    
    _columns = {
        'discount': fields.float('Descuento en factura (%)', digits=(16, 2), help="""Si
                                  eliges aplicar un descuento este será aplicado
                                  a la base imponible de la factura, es decir previo
                                  a la aplicación del impuesto."""),
        'amount_untaxed': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Untaxed Amount',
            store={
                'purchase.order.line': (_get_order, None, 10),
            }, multi="sums", help="The amount without tax", track_visibility='always'),
        'amount_discount': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Descuento',
            store={
                'purchase.order.line': (_get_order, None, 10),
            }, multi="sums", help="The discount amount on invoice", track_visibility='always'),
        'amount_tax': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Taxes',
            store={
                'purchase.order.line': (_get_order, None, 10),
            }, multi="sums", help="The tax amount"),
        'amount_total': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Total',
            store={
                'purchase.order.line': (_get_order, None, 10),
            }, multi="sums",help="The total amount"),
        'visible_discount': fields.related('pricelist_id', 'visible_discount', string="Visible discount", type="boolean"),
    
    }
